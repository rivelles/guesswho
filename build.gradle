import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.Database
import org.jooq.meta.jaxb.Generate
import org.jooq.meta.jaxb.Generator
import org.jooq.meta.jaxb.Jdbc
import org.jooq.meta.jaxb.Configuration
import org.jooq.meta.jaxb.Strategy
import org.jooq.meta.jaxb.Target


buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		classpath 'org.jooq:jooq-codegen:3.17.5'
		classpath 'org.postgresql:postgresql:42.5.0'
	}
}

plugins {
	id 'org.springframework.boot' version '2.6.9'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "com.diffplug.spotless" version "6.8.0"
}

apply plugin: 'com.diffplug.spotless'

group = 'com.rivelles'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	compileOnly 'com.diffplug.spotless:spotless-plugin-gradle:6.11.0'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.jooq:jooq:3.17.5'
	implementation 'org.jooq:jooq-meta:3.17.5'
	implementation 'org.jooq:jooq-codegen:3.17.5'

	implementation 'org.postgresql:postgresql:42.5.0'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-inline:4.8.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

spotless {
	ratchetFrom 'origin/main'

	format 'misc', {
		target '*.gradle', '*.md', '.gitignore'

		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
	}
	java {
		target 'src/*/java/**/*.java'

		importOrder()
		removeUnusedImports()

		googleJavaFormat('1.15.0').aosp().reflowLongStrings()
		licenseHeader '/* (C)$YEAR */'
	}
}

tasks.create("jooqGenerateCode") {
	def outputDirectory = projectDir.toString() + '/src/main/java/com/rivelles/guesswho/adapters/database/jooq'

	GenerationTool.generate(
			new Configuration()
					.withLogging(org.jooq.meta.jaxb.Logging.DEBUG)
					.withJdbc(new Jdbc()
							.withDriver('org.postgresql.Driver')
							.withUrl('jdbc:postgresql://localhost:5432/postgres')
							.withUser('postgres')
							.withPassword('postgres'))
					.withGenerator(new Generator()
							.withDatabase(new Database()
									.withName("org.jooq.meta.postgres.PostgresDatabase")
									.withInputSchema("public")
							)
							.withGenerate(new Generate()
									.withPojos(true)
									.withDaos(true))
							.withTarget(new Target()
									.withDirectory(outputDirectory))))
}
